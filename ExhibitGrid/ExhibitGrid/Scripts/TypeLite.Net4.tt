<#@ template debug="false" hostspecific="True" language="C#" #>
<#@ assembly name="$(TargetDir)TypeLite.dll" #>
<#@ assembly name="$(TargetDir)TypeLite.Net4.dll" #>
<#@ assembly name="$(TargetDir)$(TargetFileName)" #>

<#@ import namespace="TypeLite" #> 
<#@ import namespace="TypeLite.Net4" #> 
<#@ import namespace="ExhibitGrid.ViewModel" #> 
<#@output extension=".d.ts"#>


 <#@include file="Manager.ttinclude"#>
<# var manager = Manager.Create(Host, GenerationEnvironment); #>

<# var ts = TypeScript.Definitions()
		.WithReference("Enums.ts")
		.For<ExhibitGrid.ViewModel.GridVm>()
		.For<ExhibitGrid.ViewModel.RowVm>()
		.For<ExhibitGrid.ViewModel.v2.BaseCellVm>()
		.For<ExhibitGrid.ViewModel.v2.DataCellVm>()
		.For<ExhibitGrid.ViewModel.v2.GridVm>()
		.For<ExhibitGrid.ViewModel.v2.NarrativeCellVm>()
		.For<ExhibitGrid.ViewModel.v2.PostItCellVm>()
		.For<ExhibitGrid.ViewModel.v2.TextCellVm>()
		.For<ExhibitGrid.ViewModel.v2.RowVm>()
		.For<ExhibitGrid.ViewModel.v2.ColumnHeaderVm>()
		.WithTypeFormatter((type, f) => "I" + ((TypeLite.TsModels.TsClass)type).Name);

#>



<#= ts.Generate(TsGeneratorOutput.Properties) #>

<# manager.StartNewFile("Enums.ts"); #>
<#= ts.Generate(TsGeneratorOutput.Enums) #>
<# manager.EndBlock(); #>
<# manager.Process(true); #>