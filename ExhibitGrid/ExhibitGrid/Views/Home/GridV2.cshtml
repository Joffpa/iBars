@model ExhibitGrid.ViewModel.GridVm

<script src="~/Scripts/system-polyfills.js"></script>
@*<script src="~/Scripts/system.js"></script>*@
@*<script src="~/Scripts/Rx.js"></script>*@
@*<script src="~/Scripts/angular2.dev.js"></script>*@
<script src="~/Scripts/GridV2/angular2-polyfills.min.js"></script>
<script src="~/Scripts/es6-shim.min.js"></script>
<script src="~/Scripts/shims_for_IE.js"></script>
<script src="~/Scripts/GridV2/Rx.umd.min.js"></script>
<script src="~/Scripts/GridV2/angular2-all.umd.min.js"></script>
<script src="~/Scripts/kendo/2016.1.112/kendo.all.min.js"></script>
<link href="~/Content/gridTable.min.css" rel="stylesheet" />
<link href="~/Content/kendo/2016.1.112/kendo.common.min.css" rel="stylesheet" />
<link href="~/Content/kendo/2016.1.112/kendo.silver.min.css" rel="stylesheet" />
@*<script src="~/Scripts/GridV2/system-config.js"></script>*@
@*<script src="~/Scripts/Grid/modelService.js"></script>*@
<script src="~/Scripts/GridV2/grid-model.service.js"></script>

@{
    var headerLevels = Model.Columns.Select(ch => ch.Level).Distinct().OrderByDescending(i => i);
    var firstRow = true;
    var headerLevelZero = Model.Columns.Where(c => c.Level == 0).OrderBy(c => c.DisplayOrder);
    var numExtraCols = 0;
    var hasSelect = false;
    var hasCollapse = false;
    var hasAdd = false;
    var hasDelete = false;
    if (Model.DataRows.Any(r => r.CanSelect))
    {
        numExtraCols++;
        hasSelect = true;
    }
    if (Model.DataRows.Any(r => r.CanCollapse))
    {
        numExtraCols++;
        hasCollapse = true;
    }
    if (Model.DataRows.Any(r => r.CanAdd))
    {
        numExtraCols++;
        hasAdd = true;
    }
    if (Model.DataRows.Any(r => r.CanDelete))
    {
        numExtraCols++;
        hasDelete = true;
    }
}

<script>
    (function () {
        Services.GridModelService.addGridVm(@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model)));
        
        //var rowComponent = ng.core
        //.Component({

        //})
        //.Class({

        //});
        
        var gridApp = ng.core
        .Component({
            selector: "[@(Model.GridCode + "App")]",
            template: "<tr *ngfor='#row of GridVm.DataRows' ><td>cell 1</td></tr>",
            directives: [
              ng.common.CORE_DIRECTIVES,
              ng.common.FORM_DIRECTIVES
            ]
        })
       .Class({
           constructor: function () {
               this.GridVm = Services.GridModelService.getGridVm("@Model.GridCode");
           },
           updateIncomplete: function () {
               return this.todos.filter(function (item) {
                   return !item.complete;
               }).length;
           }
       });
        
        document.addEventListener('DOMContentLoaded', function () {
            ng.platform.browser.bootstrap(gridApp, [GridModelService, ng.core.provide("gridModelService")]);
        });

    }());


</script>


<table class="table table-bordered exhibit-table">
    <thead>
        @foreach (var level in headerLevels)
        {
            <tr>
                @if (firstRow)
                {
                    <th class="grid-name" colspan="@(numExtraCols + headerLevelZero.Count(h => !h.HasHeader && !h.IsHidden))" rowspan="@headerLevels.Count()">
                        @Model.DisplayText
                    </th>
                }
                @{
                var thisLevel = level;
                }
                @foreach (var column in Model.Columns.Where(h => h.Level == thisLevel && h.HasHeader && !h.IsHidden).OrderBy(h => h.DisplayOrder))
                {
                    <th scope="col" colspan="@(column.ColSpan)">
                        @Html.Raw(column.DisplayText)
                    </th>
                }
                @{ firstRow = false; }
            </tr>
        }
    </thead>
    <tbody @(Model.GridCode + "App")  gridcode="@Model.GridCode">
    </tbody>
</table>