@model ExhibitGrid.ViewModel.GridVm

<script src="~/Scripts/system-polyfills.js"></script>

<script src="~/Scripts/system.js"></script>
<script src="~/Scripts/Rx.js"></script>
@*<script src="~/Scripts/angular2.dev.js"></script>*@

<script src="~/Scripts/GridV2/angular2-polyfills.min.js"></script>
<script src="~/Scripts/es6-shim.min.js"></script>
<script src="~/Scripts/shims_for_IE.js"></script>

<script src="~/Scripts/GridV2/Rx.umd.min.js"></script>
<script src="~/Scripts/GridV2/angular2-all.umd.min.js"></script>
@*<script src="~/Scripts/GridV2/angular2-all.umd.dev.js"></script>*@

<script src="~/Scripts/kendo/2016.1.112/kendo.all.min.js"></script>
<link href="~/Content/gridTable.min.css" rel="stylesheet" />
<link href="~/Content/kendo/2016.1.112/kendo.common.min.css" rel="stylesheet" />
<link href="~/Content/kendo/2016.1.112/kendo.silver.min.css" rel="stylesheet" />

@*<link href="~/Content/gridTable.css" rel="stylesheet" />*@

@*<script src="~/Scripts/GridV2/system-config.js"></script>*@

<script src="~/Scripts/GridV2/eas-cell.component.js"></script>
@*<script src="~/Scripts/Grid/modelService.js"></script>*@


@{
    var headerLevels = Model.Columns.Select(ch => ch.Level).Distinct().OrderByDescending(i => i);
    var firstRow = true;
    var headerLevelZero = Model.Columns.Where(c => c.Level == 0).OrderBy(c => c.DisplayOrder);
    var numExtraCols = 0;
    var hasSelect = false;
    var hasCollapse = false;
    var hasAdd = false;
    var hasDelete = false;
    if (Model.DataRows.Any(r => r.CanSelect))
    {
        numExtraCols++;
        hasSelect = true;
    }
    if (Model.DataRows.Any(r => r.CanCollapse))
    {
        numExtraCols++;
        hasCollapse = true;
    }
    if (Model.DataRows.Any(r => r.CanAdd))
    {
        numExtraCols++;
        hasAdd = true;
    }
    if (Model.DataRows.Any(r => r.CanDelete))
    {
        numExtraCols++;
        hasDelete = true;
    }
}

<script>
    (function () {

        var components = new Eas.Component(ng);

        var rowComponent = ng.core
            .Component({
                selector: "[@(Model.GridCode + "Row")]",
                template: "<td colspan='1' [RowVm]='row' easSelectCell></td> <td [CellVm]='RowVm.Cells[0]' easTextCell></td> <td [CellVm]='RowVm.Cells[1]' easNumericCell></td>",
                inputs: ['RowVm'],
                directives:[
                    components.SelectCell,
                    components.TextCell,
                    components.NumericCell,
                    ng.common.CORE_DIRECTIVES,
                    ng.common.FORM_DIRECTIVES
                ]
            })
            .Class({
                constructor: function () {
                    this.RowVm;
                },
            });

        var gridApp = ng.core
            .Component({
                selector: "[@(Model.GridCode + "App")]",
                template: "<div style='display:table-row' *ngFor='#row of GridVm.DataRows' [RowVm]='row' @(Model.GridCode + "Row")></div>",
                directives: [
                    ng.common.CORE_DIRECTIVES,
                    ng.common.FORM_DIRECTIVES,
                    rowComponent
                ]
            })
            .Class({
                constructor: function () {
                    this.GridVm = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));
                },
                customFunc: function () {
                }
            });


        document.addEventListener('DOMContentLoaded', function () {
            ng.platform.browser.bootstrap(gridApp);
        });
    }());
</script>



@*<script>
    window.require = System.amdRequire;
    window.appSelector = "[easApp]";
    window.appTemplate = "<tr> <td> one </td> </tr>";

    System.config({
        defaultJSExtensions: true,
        packages: {
            'angular2': {
                defaultExtension: false
            },
            'rxjs': {
                defaultExtension: false
            }
        }
    });


    var promise = System.import('/Scripts/GridV2/main.js');

    promise.then(function () {
        console.log("bootstrap 2");
        window.appSelector = "[easApp2]";
        window.appTemplate = "<tr> <td> two </td> </tr>";
        var mod = System.get("http://localhost:61205/Scripts/GridV2/eas-app.component.js");
        ng.platform.browser.bootstrap(mod.EasAppComponent);
    });
</script>*@

<table class="table table-bordered exhibit-table">
    <thead>
        @foreach (var level in headerLevels)
        {
            <tr>
                @if (firstRow)
                {
                    <th class="grid-name" colspan="@(numExtraCols + headerLevelZero.Count(h => !h.HasHeader && !h.IsHidden))" rowspan="@headerLevels.Count()">
                        @Model.DisplayText
                    </th>
                }
                @{
            var thisLevel = level;
                }
                @foreach (var column in Model.Columns.Where(h => h.Level == thisLevel && h.HasHeader && !h.IsHidden).OrderBy(h => h.DisplayOrder))
                {
                    <th scope="col" colspan="@(column.ColSpan)">
                        @Html.Raw(column.DisplayText)
                    </th>
                }
                @{ firstRow = false; }
            </tr>
        }
    </thead>
    <tbody @(Model.GridCode + "App") gridcode="@Model.GridCode"></tbody>
</table>
